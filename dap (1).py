# -*- coding: utf-8 -*-
"""DAP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I8MYNQAluhH1KDkU7DX0qVpOBM6mv50C
"""

import numpy as np
print("Basic functions")
arr=np.array([1,2,3,4,5])
print(arr)
a_arr=np.zeros((3,3),dtype=int)
print(a_arr)
b_arr=np.ones((2,2),dtype=int)
print(b_arr)
print("range")
x=np.arange(10)
print(x)
print("reshape")
reshape=arr.reshape(5,1)
print(reshape)
print("Slice")
y=arr[2:4]
print(y)

import pandas as pd
a=['jwalitha','vasanthi','ramya','lahari','varshitha','rupa','teja']
r=pd.Series(a, index=[22,34,54,64,33,65,12])
print(r)

import pandas as pd
df=pd.read_csv("/content/txtfile.txt", sep=" ")
print(df)

import pandas as pd
df=pd.read_csv("/content/csvfile.csv")
print(df.loc[1])

import pandas as pd
df=pd.read_csv("/content/csvfile.csv")
mv=df['Data_value'].mean()
df=df.fillna(mv)
print(mv)

import pandas as pd
df=pd.read_excel("/content/excel.xlsx")
mv=df['Age'].mean()
df=df.fillna(mv)
print(mv)

import pandas as pd
df=pd.read_excel("/content/excel.xlsx",sheet_name=1)
print(df)

import numpy as np
print("Manipulation functions")
arr1=np.array([1,2,3,4])
arr2=np.array([1,2,3,4])
sum=np.add(arr1,arr2)
print(sum)
print("Broadcasting")
result=arr1+3
print(result)
print("Manipulation using vstack")
z=np.vstack(arr1+arr2)
print(z)
print("Manipulation using stack")
r=np.stack(arr1+arr2)
print(r)
print("Split function")
s=np.split(arr1,2)
print(s)
print("Transpose")
arr5=np.array([[1,2,3],[4,5,6]])
print(arr5)
t1=arr5.T
print(t1)

import numpy as np
print("Sum of elements of a matrix")
a=np.array([[2,3,4],[4,8,5]])
x=np.sum(a)
print(x)
print("Sum of elements 2 matrices")
b=np.array([[2,9,8],[3,8,5]])
y=np.sum(a+b)
print(y)
d=np.sum(a, axis=0)
print(d)
e=np.sum(a, axis=1)
print(e)

print("Matrix multiplication")
a=np.array([[1,2],[4,5]])
b=np.array([[7,8],[6,3]])
c=np.dot(a,b)
print(c)
x=np.linalg.eig(c)
print(x)

import numpy as np
print("statistical operations")
print("Standard deviation")
a=np.array([1,2,3,4,5])
m=np.mean(a)
print(m)
med=np.median(a)
print(med)
vari=np.var(a)
print(vari)
std=np.std(a)
print(std)

data = np.loadtxt("/content/app.txt")
data=np.savetxt("/content/app2.txt",data)
print(data)

import pandas as pd
df=pd.read_excel("/content/excel.xlsx")
df=df.drop_duplicates()
print(df)
df.head(2)
df.shape

import pandas as pd
df=pd.read_csv("/content/csvfile.csv")
dfn=df.tail(10)
for i in range(22188,22178,-1):
  df.drop([i],axis=0,inplace=True)
dfn.to_csv("new_file")
dfs=pd.read_csv("/content/new_file")
print(dfs.groupby(['Subject'])['UNITS'].count())

dfs=pd.read_csv("/content/new_file")
print(dfs)

import pandas as pd
df=pd.read_csv("/content/csvfile.csv")
print(df)

import pandas as pd
df=pd.read_csv("/content/csvfile.csv")
df.shape

from google.colab import drive
drive.mount('/content/drive')

import matplotlib.pyplot as plt
a=np.array([1,2,3,4,5])
plt.plot(a)

import numpy as np
import matplotlib.pyplot as plt
runs=np.array([100,50,91,78,89,66,43,42,44,88])
w=np.array([1,0,2,0,3,7,8,9,5,6])
plt.xlabel("runs")
plt.ylabel("wickets")
plt.plot(runs,w,color='orange')
plt.title('IndvsAus Score')
plt.show()

import numpy as np
import matplotlib.pyplot as plt
tigar= np.linspace(-2*np.pi,2*np.pi, 50)
print(tigar)
plt.scatter(tigar,np.sin(tigar),color='black')
plt.title("sin(x)")
plt.show()

import numpy as np
import matplotlib.pyplot as plt
overs1=np.arange(5,50,5)
overs2=np.arange(5,30,5)
runs1=np.array([25,51,84,131,160,189,220,250,267])
runs2=np.array([15,41,94,110,151])
w=np.array([12,32,96])
plt.xlabel("runs")
plt.ylabel("wickets")
plt.subplot(1,2,2)
plt.plot(overs1,runs1,color='blue',label='india')
plt.legend(loc='best')
plt.subplot(1,2,1)
plt.plot(overs2,runs2,color='yellow',label='aus')
plt.legend(loc='best')
plt.title('IndvsAus Score')
plt.show()

import matplotlib.pyplot as plt
a=[230,560,780,127,128]
b=[200,160,270,127,400]
years=[1,2,3,4]
profit_a=[(a[i]-a[i-1]) for i in range(1,len(a))]
profit_b=[(b[i]-b[i-1]) for i in range(1,len(b))]
plt.subplot(2,1,2)
plt.plot(years,profit_a,color='hotpink',linewidth='3',label='CompanyA',marker='D',ms='10',mec='r')
plt.subplot(2,1,1)
plt.plot(years,profit_b,color='black',linestyle='dotted',label='CompanyB',marker='H')

a=np.array([25,60,5,11])
labe=["aiml","python","matplotlib","vasanthi"]
col=['green','blue','violet','white']
explo=[0,0,0,0.3]
plt.figure(facecolor='yellow')
plt.pie(a,labels=labe,colors=col,explode=explo,textprops={'fontsize': 19},startangle=180,shadow=True)
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df=pd.read_excel("/content/Book 5.xlsx")
print(df)
print("Average of temperature")
mv=df['temperature'].mean()
print(mv)
print("Highest temperature")
x=df['temperature'].max()
y= df.loc[df['temperature'].idxmax(), 'date']
print(x ,"on", y)
print("Lowest temperature")
a=df['temperature'].min()
b=df.loc[df['temperature'].idxmin(), 'date']
print(a ,"on" ,b)
threshold=32
print("Temperature above a given threshold of",threshold)
ab=(df['temperature'] > threshold).sum()
print(ab)
plt.plot(df['date'],df['temperature'],color='black',linewidth='1')
plt.xlabel("date")
plt.ylabel("temperature")
t=np.array([x,a])
n=np.array([y,b])
plt.scatter(n,t,color='red')
plt.show()

pip install seaborn

import seaborn as sns
import matplotlib.pyplot as plt
tips=sns.load_dataset("titanic")
print(tips)
sns.scatterplot(x="embark_town",y='age',data=tips)
plt.title("Scatter plot place and age groups of people")
plt.xlabel("Place")
plt.ylabel("Age")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
tips=sns.load_dataset("flights")
print(tips)
sns.scatterplot(x="year",y='passengers',data=tips)
plt.title("Scatter plot place and age groups of people")
plt.xlabel("Place")
plt.ylabel("Age")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
tips=sns.load_dataset("tips")
print(tips)
sns.violinplot(x="day",y='total_bill',data=tips)
plt.title("Scatter plot place and age groups of people")
plt.xlabel("Place")
plt.ylabel("Age")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
tips=sns.load_dataset("fmri")
print(tips.head())
correlation_matrix= tips.corr()
sns.heatmap(correlation_matrix, annot=True,cmap='coolwarm')
plt.title("Correlation heatmap of iris dataset")
plt.show()